{
    "1200": {
        "file_id": 238,
        "content": "#coding: utf-8\nimport sys\nfrom PyQt4 import QtGui, QtCore\nimport time\nimport win32ui\nfrom threading import Thread\nimport random\nfrom datetime import datetime\nimport cv2, numpy, win32gui, win32con\ndef getShot(hWnd):\n    #获取后台窗口的句柄，注意后台窗口不能最小化\n    # hWnd = win32gui.FindWindow(\"FaceRigWndClass\", None)\n    # hWnd=hWnd\n    # nothing there. give it up. do not hide it.\n    # hWnd = win32gui.FindWindow(\"NotePad\",None) #窗口的类名可以用Visual Studio的SPY++工具获取\n    #获取句柄窗口的大小信息\n    left, top, right, bot = win32gui.GetWindowRect(hWnd)\n    width = right - left\n    height = bot - top\n    #返回句柄窗口的设备环境，覆盖整个窗口，包括非客户区，标题栏，菜单，边框\n    hWndDC = win32gui.GetWindowDC(hWnd)\n    #创建设备描述表\n    mfcDC = win32ui.CreateDCFromHandle(hWndDC)\n    #创建内存设备描述表\n    saveDC = mfcDC.CreateCompatibleDC()\n    #创建位图对象准备保存图片\n    saveBitMap = win32ui.CreateBitmap()\n    #为bitmap开辟存储空间\n    saveBitMap.CreateCompatibleBitmap(mfcDC, width, height)\n    #将截图保存到saveBitMap中\n    saveDC.SelectObject(saveBitMap)\n    #保存bitmap到内存设备描述表\n    saveDC.BitBlt((0, 0), (width, height), mfcDC, (0, 0), win32con.SRCCOPY)",
        "type": "code",
        "location": "/windows/rdp/demo_qt_py27.py:1-33"
    },
    "1201": {
        "file_id": 238,
        "content": "This code imports various libraries and defines a function 'getShot' that captures the screen of a specified window, including its title bar, menu, and borders. It uses win32gui and win32ui to interact with Windows GUI elements, and PyQt4 for Python GUI programming. The code snippet retrieves the window handle, gets the window dimensions and creates a compatible DC (Device Context) in memory to save the screenshot.",
        "type": "comment"
    },
    "1202": {
        "file_id": 238,
        "content": "    #如果要截图到打印设备：\n    ###最后一个int参数：0-保存整个窗口，1-只保存客户区。如果PrintWindow成功函数返回值为1\n    #result = windll.user32.PrintWindow(hWnd,saveDC.GetSafeHdc(),0)\n    #print(result) #PrintWindow成功则输出1\n    #保存图像\n    ##方法一：windows api保存\n    ###保存bitmap到文件\n    # saveBitMap.SaveBitmapFile(saveDC,\"img_Winapi.bmp\")\n    ##方法二(第一部分)：PIL保存\n    # ###获取位图信息\n    # bmpinfo = saveBitMap.GetInfo()\n    # bmpstr = saveBitMap.GetBitmapBits(True)\n    # ###生成图像\n    # im_PIL = Image.frombuffer('RGB',(bmpinfo['bmWidth'],bmpinfo['bmHeight']),bmpstr,'raw','BGRX',0,1)\n    ##方法二（后续转第二部分）\n    ##方法三（第一部分）：opencv+numpy保存\n    ###获取位图信息\n    signedIntsArray = saveBitMap.GetBitmapBits(True)\n    ##方法三（后续转第二部分）\n    # restart might be needed.\n    #内存释放\n    win32gui.DeleteObject(saveBitMap.GetHandle())\n    saveDC.DeleteDC()\n    mfcDC.DeleteDC()\n    win32gui.ReleaseDC(hWnd, hWndDC)\n    ##方法二（第二部分）：PIL保存\n    ###PrintWindow成功,保存到文件,显示到屏幕\n    # im_PIL.save(\"im_PIL.png\") #保存\n    # im_PIL.show() #显示\n    ##方法三（第二部分）：opencv+numpy保存\n    ###PrintWindow成功，保存到文件，显示到屏幕\n    im_opencv = numpy.frombuffer(signedIntsArray, dtype='uint8')",
        "type": "code",
        "location": "/windows/rdp/demo_qt_py27.py:35-71"
    },
    "1203": {
        "file_id": 238,
        "content": "This code captures a window's content using PrintWindow API, and then saves it as an image file using Pillow (PIL) or OpenCV library with different methods. It also provides options to save the bitmap directly using Windows API, and releases resources at the end.",
        "type": "comment"
    },
    "1204": {
        "file_id": 238,
        "content": "    im_opencv.shape = (height, width, 4)\n    cv2.cvtColor(im_opencv, cv2.COLOR_BGRA2RGB)\n    return im_opencv\ndef writeMe(a,im_opencv):\n    cv2.imwrite(a, im_opencv, [int(cv2.IMWRITE_JPEG_QUALITY), 100])  #保存\n'''\ndef rejectExternal(event):\n    if event.spontaneous():\n        event.ignore()\n        # not rejecting. wtf?\n        print(\"spontaneous event ignored!\")\n    else:\n        event.accept()\n        print(\"internal event accepted!\")\n'''\nclass Example(QtGui.QWidget):\n    def __init__(self):\n        super(Example, self).__init__()\n        self.initUI()\n    def initUI(self):               \n        x, y = -99999,-99999 # hard core tricks? also vanish from the command palette!\n#        x, y = 0, 0\n        qbtn = QtGui.QPushButton('Quit', self)\n        #qbtn.clicked.connect(QtCore.QCoreApplication.instance().quit)\n        qbtn.clicked.connect(self.test)\n        qbtn.resize(qbtn.sizeHint())\n        qbtn.move(50, 50)       \n        #qbtn.installEventFilter(self)\n        self.setGeometry(x+0, y+0, 1024, 768)\n        self.setWindowTitle('Quit button')    ",
        "type": "code",
        "location": "/windows/rdp/demo_qt_py27.py:72-107"
    },
    "1205": {
        "file_id": 238,
        "content": "This code defines a function to save an image using OpenCV, a class inheriting from QWidget, and a method to handle button events. The window's geometry is set to specific values and the quit button's position is adjusted accordingly.",
        "type": "comment"
    },
    "1206": {
        "file_id": 238,
        "content": "        self.setWindowFlags(self.windowFlags() | QtCore.Qt.FramelessWindowHint)\n        self.installEventFilter(self)\n        self.show()\n#        self.setVisible(False)\n#        self.hide()\n#        self.setShown(False)\n#        painter = QtGui.QStylePainter()\n#        painter.begin(self)\n#        self.hide()\n#        qbtn.show()\n    def eventFilter(self,object,event):\n\tif event.type() in [QtCore.QEvent.MouseButtonPress,QtCore.QEvent.MouseButtonRelease,QtCore.QEvent.MouseButtonDblClick,QtCore.QEvent.MouseMove,QtCore.QEvent.KeyRelease,QtCore.QEvent.KeyPress,QtCore.QEvent.ShortcutOverride]:\n\t    return event.spontaneous()\n        else:\n            return False\n    def test(self):\n        print \"show the position of mouse cursor in screen resolution: x is ?? , y is ??\"\n    def mousePressEvent(self, QMouseEvent):\n        print 'press: (', QMouseEvent.x(), ', ', QMouseEvent.y(), ')',time.time()\n        if not QMouseEvent.spontaneous():\n            print(\"internal event accepted!\")\n            super(Example,self).mousePressEvent(QMouseEvent)",
        "type": "code",
        "location": "/windows/rdp/demo_qt_py27.py:108-132"
    },
    "1207": {
        "file_id": 238,
        "content": "This code creates a frameless window with event filtering, shows the position of the mouse cursor on screen resolution, and handles mouse press events.",
        "type": "comment"
    },
    "1208": {
        "file_id": 238,
        "content": "        else:\n            print(\"spontaneous event ignored!\")\n            pass\n    def mouseReleaseEvent(self, QMouseEvent):\n        print 'release: (', QMouseEvent.x(), ', ', QMouseEvent.y(), ')',time.time()\n        if not QMouseEvent.spontaneous():\n            print(\"internal event accepted!\")\n            super(Example,self).mouseReleaseEvent(QMouseEvent)\n        else:\n            print(\"spontaneous event ignored!\")\n            pass\n    def mouseMoveEvent(self, QMouseEvent):\n        print 'moving!: ','(', QMouseEvent.x(), ', ', QMouseEvent.y(), ')',time.time()\n        print 'isSpontaneous: ',QMouseEvent.spontaneous()\n        if not QMouseEvent.spontaneous():\n            print(\"internal event accepted!\")\n            super(Example,self).mouseMoveEvent(QMouseEvent)\n        else:\n            print(\"spontaneous event ignored!\")\n            pass\n# this one is totally black, and cannot be used for fun.\n# we shall consider some hide?\ndef shoot(widget):\n    date = datetime.now()\n    filename = date.strftime('%Y-%m-%d_%H-%M-%S.jpg')",
        "type": "code",
        "location": "/windows/rdp/demo_qt_py27.py:133-160"
    },
    "1209": {
        "file_id": 238,
        "content": "This code seems to be a part of a GUI application, likely built using the Qt framework. The code handles mouse events and ignores spontaneous ones while printing event details and timestamps. It also includes a function to capture and save screenshots with the current date and time as filename.",
        "type": "comment"
    },
    "1210": {
        "file_id": 238,
        "content": "# this is just wrong.\n#    p = QtGui.QPixmap.grabWindow(application.winid(),*widget.geometry().getRect())\n#    win_id = widget.windowHandle()\n#    print win_id, \"window handle\"\n#    print dir(widget.window())\n    img = getShot(int(widget.winId()))\n    writeMe(filename,img)\n    #p = QtGui.QPixmap.grabWindow(widget.winId())\n    #p.save(filename, 'jpg')\n#    label.setPixmap(p)        # just for fun :)\n    print \"shot taken\",filename\nimport win32gui\ndef shoot_thread(widget):\n    time.sleep(2)\n    print \"shoot thread initialized!\"\n    # hwnd = int(widget.winId())\n    # win32gui.ShowWindow(hwnd, False)\n    while True:\n        shoot(widget)\n        time.sleep(2)\n# when hidden, you cannot get the shot. what the fuck?\ndef some_args(window,mainWindow):\n    time.sleep(2)\n#    pid = window.applicationPid()\n    rng = random.SystemRandom()\n#    window.hide()\n#    mainWindow.hide()\n# yes you can hide this.\n    def width(): return rng.choice(range(1024))\n    def height(): return rng.choice(range(768))\n    print \"thread_waiting_finished!\"",
        "type": "code",
        "location": "/windows/rdp/demo_qt_py27.py:161-194"
    },
    "1211": {
        "file_id": 238,
        "content": "The code aims to take a screenshot of a specified window using Python and Qt libraries. It initially attempts to grab the window using `QtGui.QPixmap.grabWindow()` method, but it seems this approach is incorrect. Instead, it uses `getShot(int(widget.winId()))` to capture the screen. The code also includes a function `shoot_thread()` for continuous screenshotting and a helper function `some_args()`. However, taking shots while the window is hidden is not possible. The code also includes random width and height settings for the captured image.",
        "type": "comment"
    },
    "1212": {
        "file_id": 238,
        "content": "    while True:\n        # exception found.\n#        print \"THIS IS THE PID OF THE MAIN APP\",pid\n        info = (width(),height())\n        point = QtCore.QPoint(*info)\n        print \"Random moving destination\",point\n        event = QtGui.QMouseEvent(QtCore.QEvent.MouseMove,point,QtCore.Qt.NoButton,QtCore.Qt.MouseButtons(),QtCore.Qt.KeyboardModifiers())\n        window.sendEvent(mainWindow,event)\n        time.sleep(0.3)\ndef main():\n    # do threading here. wait till ready?\n    app = QtGui.QApplication(sys.argv)\n    ex = Example()\n#    ex.setWindowFlags(QtCore.Qt.WindowStaysOnBottomHint)\n#    ex.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnBottomHint)\n#    app.setWindowFlags(QtCore.Qt.FramelessWindowHint)\n#    ex.hide()\n# to prove we need to take screenshots.\n    app.installEventFilter(ex)\n    ex.setMouseTracking(True)\n    thread = Thread(target=some_args,args=(app,ex))\n# this thread will be shutting down the window.\n    thread.daemon = True\n    thread.start()\n    thread0 = Thread(target=shoot_thread,args=(ex,))",
        "type": "code",
        "location": "/windows/rdp/demo_qt_py27.py:195-221"
    },
    "1213": {
        "file_id": 238,
        "content": "This code is running an infinite loop, possibly due to an exception. It randomly selects a moving destination and sends a mouse move event to the window using QApplication. A thread is started for some_args function, and another thread starts shooting events on the window with Example as the argument. Window flags like FramelessWindowHint and WindowStaysOnBottomHint are set. The code seems to be related to handling events or moving elements on a window.",
        "type": "comment"
    },
    "1214": {
        "file_id": 238,
        "content": "    thread0.daemon = True\n    thread0.start()\n    sys.exit(app.exec_())\nif __name__ == '__main__':\n    main()",
        "type": "code",
        "location": "/windows/rdp/demo_qt_py27.py:222-228"
    },
    "1215": {
        "file_id": 238,
        "content": "This code creates a daemon thread, starts it, and then exits the program after executing the Qt application. The if __name__ == '__main__': block ensures this code only runs when the script is executed directly (not imported as a module).",
        "type": "comment"
    },
    "1216": {
        "file_id": 239,
        "content": "/windows/rdp/hidden_notepad.py",
        "type": "filepath"
    },
    "1217": {
        "file_id": 239,
        "content": "This code uses subprocess and win32gui to start Notepad, wait for it to open, then enumerate the top-level windows looking for one owned by the process. Once found, it hides that window before waiting for the process to finish.",
        "type": "summary"
    },
    "1218": {
        "file_id": 239,
        "content": "import subprocess\nimport win32gui\nimport time\nimport win32process\nproc = subprocess.Popen([\"notepad.exe\"],shell=False)\n# lets wait a bit to app to start\ntime.sleep(3)\ntarget = proc.pid\ndef enumWindowFunc(hwnd, windowList):\n    \"\"\" win32gui.EnumWindows() callback \"\"\"\n#    text = win32gui.GetWindowText(hwnd)\n#    className = win32gui.GetClassName(hwnd)\n    TId, PId = win32process.GetWindowThreadProcessId(hwnd)\n    #print hwnd, text, className\n    if PId == target:\n        windowList.append(hwnd)\nmyWindows = []\n# enumerate thru all top windows and get windows which are ours\nwin32gui.EnumWindows(enumWindowFunc, myWindows)\n# now hide my windows, we can actually check process info from GetWindowThreadProcessId\n# http://msdn.microsoft.com/en-us/library/ms633522(VS.85).aspx\nfor hwnd in myWindows:\n    print hwnd,type(hwnd)\n    win32gui.ShowWindow(hwnd, False)\n# as our notepad is now hidden\n# you will have to kill notepad in taskmanager to get past next line\nproc.wait()\nprint \"finished.\"",
        "type": "code",
        "location": "/windows/rdp/hidden_notepad.py:1-33"
    },
    "1219": {
        "file_id": 239,
        "content": "This code uses subprocess and win32gui to start Notepad, wait for it to open, then enumerate the top-level windows looking for one owned by the process. Once found, it hides that window before waiting for the process to finish.",
        "type": "comment"
    },
    "1220": {
        "file_id": 240,
        "content": "/windows/winauto/example.py",
        "type": "filepath"
    },
    "1221": {
        "file_id": 240,
        "content": "The code uses win32 libraries to interact with a specific application window, finding the parent and child window unique IDs. It sends the character 'D' continuously in an infinite loop with 1-second intervals.",
        "type": "summary"
    },
    "1222": {
        "file_id": 240,
        "content": "#you will need the win32 libraries for this snippet of code to work, Links below\nimport win32gui\nimport win32con\nimport win32api\nfrom time import sleep\n#[hwnd] No matter what people tell you, this is the handle meaning unique ID, \n#[\"Notepad\"] This is the application main/parent name, an easy way to check for examples is in Task Manager\n#[\"test - Notepad\"] This is the application sub/child name, an easy way to check for examples is in Task Manager clicking dropdown arrow\n#hwndMain = win32gui.FindWindow(\"Notepad\", \"test - Notepad\") this returns the main/parent Unique ID\nhwndMain = win32gui.FindWindow(\"Notepad\", \"test - Notepad\")\n#[\"hwndMain\"] this is the main/parent Unique ID used to get the sub/child Unique ID\n#[win32con.GW_CHILD] I havent tested it full, but this DOES get a sub/child Unique ID, if there are multiple you'd have too loop through it, or look for other documention, or i may edit this at some point ;)\n#hwndChild = win32gui.GetWindow(hwndMain, win32con.GW_CHILD) this returns the sub/child Unique ID",
        "type": "code",
        "location": "/windows/winauto/example.py:1-15"
    },
    "1223": {
        "file_id": 240,
        "content": "This code uses the win32 libraries to find and interact with a specific application window. It searches for the unique ID of the application's main/parent window, then retrieves the sub/child window's unique ID using the GW_CHILD constant. This approach allows interaction with a particular window within an application.",
        "type": "comment"
    },
    "1224": {
        "file_id": 240,
        "content": "hwndChild = win32gui.GetWindow(hwndMain, win32con.GW_CHILD)\n#print(hwndMain) #you can use this to see main/parent Unique ID\n#print(hwndChild)  #you can use this to see sub/child Unique ID\n#While(True) Will always run and continue to run indefinitely\nwhile(True):\n    #[hwndChild] this is the Unique ID of the sub/child application/proccess\n    #[win32con.WM_CHAR] This sets what PostMessage Expects for input theres KeyDown and KeyUp as well\n    #[0x44] hex code for D\n    #[0]No clue, good luck!\n    #temp = win32api.PostMessage(hwndChild, win32con.WM_CHAR, 0x44, 0) returns key sent\n    temp = win32api.PostMessage(hwndChild, win32con.WM_CHAR, 0x44, 0)\n# that is the letter D.\n    #print(temp) prints the returned value of temp, into the console\n    print temp \n    #sleep(1) this waits 1 second before looping through again\n    sleep(1)",
        "type": "code",
        "location": "/windows/winauto/example.py:16-33"
    },
    "1225": {
        "file_id": 240,
        "content": "The code is continuously sending the character 'D' to a child application window using PostMessage function and printing the returned value. It does this in an infinite loop, waiting 1 second between each iteration.",
        "type": "comment"
    },
    "1226": {
        "file_id": 241,
        "content": "/windows/winauto/save_pid.py",
        "type": "filepath"
    },
    "1227": {
        "file_id": 241,
        "content": "This code reads input from stdin, concatenates it with newlines, and writes the result to a file called \"pidfile\" using writeOn function.",
        "type": "summary"
    },
    "1228": {
        "file_id": 241,
        "content": "import sys\ns=\"\"\ndef writeOn(a):\n    with open(\"pidfile\",\"w+\") as f:\n        f.write(a)\nfor x in sys.stdin:\n    s+=x+\"\\n\"\nwriteOn(s)",
        "type": "code",
        "location": "/windows/winauto/save_pid.py:1-9"
    },
    "1229": {
        "file_id": 241,
        "content": "This code reads input from stdin, concatenates it with newlines, and writes the result to a file called \"pidfile\" using writeOn function.",
        "type": "comment"
    },
    "1230": {
        "file_id": 242,
        "content": "/windows/winauto/terminal_automation.py",
        "type": "filepath"
    },
    "1231": {
        "file_id": 242,
        "content": "This code uses win32 libraries to find a command prompt window, verify existence, and assigns it a unique ID. It also sends a key press event for 'D' using win32api in an infinite loop.",
        "type": "summary"
    },
    "1232": {
        "file_id": 242,
        "content": "#you will need the win32 libraries for this snippet of code to work, Links below\nimport win32gui\nimport win32con\nimport win32api\nimport win32process\nfrom time import sleep\nimport uuid\nunique_id = str(uuid.uuid1())\nimport os\nos.system(\"start cmd.exe /k \\\"title \"+unique_id+\"\\\"\")\n#target = proc.pid\ndef enumWindowFunc(hwnd, windowList):\n    \"\"\" win32gui.EnumWindows() callback \"\"\"\n    text = win32gui.GetWindowText(hwnd)\n#    className = win32gui.GetClassName(hwnd)\n    #print hwnd, text, className\n    if unique_id in text:\n        windowList.append(hwnd)\nsleep(0.1)\nmyWindows = []\n# enumerate thru all top windows and get windows which are ours\nwin32gui.EnumWindows(enumWindowFunc, myWindows)\n#print myWindows\nassert len(myWindows)==1\nhwndMain = myWindows[0]\n#[hwnd] No matter what people tell you, this is the handle meaning unique ID, \n#[\"Notepad\"] This is the application main/parent name, an easy way to check for examples is in Task Manager\n#[\"test - Notepad\"] This is the application sub/child name, an easy way to check for examples is in Task Manager clicking dropdown arrow",
        "type": "code",
        "location": "/windows/winauto/terminal_automation.py:1-33"
    },
    "1233": {
        "file_id": 242,
        "content": "This code uses the win32 libraries to open a new command prompt window, assigns it a unique ID, and waits for the window to appear. It then enumerates all top-level windows using EnumWindows callback function to find the window with the assigned ID, and finally asserts that only one window with this ID exists.",
        "type": "comment"
    },
    "1234": {
        "file_id": 242,
        "content": "#hwndMain = win32gui.FindWindow(\"Notepad\", \"test - Notepad\") this returns the main/parent Unique ID\n#hwndMain = win32gui.FindWindow(None, \"Administrator: \"+unique_id)\nprint \"main window handle\", hwndMain\n# check if the title is correct?\n# if it is the direct window.\n#[\"hwndMain\"] this is the main/parent Unique ID used to get the sub/child Unique ID\n#[win32con.GW_CHILD] I havent tested it full, but this DOES get a sub/child Unique ID, if there are multiple you'd have too loop through it, or look for other documention, or i may edit this at some point ;)\n#hwndChild = win32gui.GetWindow(hwndMain, win32con.GW_CHILD) this returns the sub/child Unique ID\n#hwndChild = win32gui.GetWindow(hwndMain, win32con.GW_CHILD)\nhwndChild = hwndMain\n#print(hwndMain) #you can use this to see main/parent Unique ID\n#print(hwndChild)  #you can use this to see sub/child Unique ID\n#While(True) Will always run and continue to run indefinitely\nwhile(True):\n    #[hwndChild] this is the Unique ID of the sub/child application/proccess",
        "type": "code",
        "location": "/windows/winauto/terminal_automation.py:34-50"
    },
    "1235": {
        "file_id": 242,
        "content": "This code finds the main window's Unique ID using \"FindWindow\" and checks if the title is correct. It then gets a sub/child Unique ID by utilizing \"GetWindow\" with GW_CHILD parameter. The hwndChild is assigned to hwndMain, and the code enters an infinite loop (while(True)). The code may need further documentation or testing for multiple child windows.",
        "type": "comment"
    },
    "1236": {
        "file_id": 242,
        "content": "    #[win32con.WM_CHAR] This sets what PostMessage Expects for input theres KeyDown and KeyUp as well\n    #[0x44] hex code for D\n    #[0]No clue, good luck!\n    #temp = win32api.PostMessage(hwndChild, win32con.WM_CHAR, 0x44, 0) returns key sent\n    temp = win32api.PostMessage(hwndChild, win32con.WM_CHAR, 0x44, 0)\n# that is the letter D.\n    #print(temp) prints the returned value of temp, into the console\n    print temp \n    #sleep(1) this waits 1 second before looping through again\n    sleep(1)",
        "type": "code",
        "location": "/windows/winauto/terminal_automation.py:51-60"
    },
    "1237": {
        "file_id": 242,
        "content": "This code uses the win32api to send a key press event (WM_CHAR) for the letter 'D' to a window handle (hwndChild). It prints the returned value of the message sent and waits for 1 second before repeating.",
        "type": "comment"
    }
}